/* Implement pow(x, n), which calculates x raised to the power n (xn).

Example 1:

Input: 2.00000, 10
Output: 1024.00000
Example 2:

Input: 2.10000, 3
Output: 9.26100
Example 3:

Input: 2.00000, -2
Output: 0.25000
Explanation: 2-2 = 1/22 = 1/4 = 0.25 */

class Solution {
public:
    double myPow(double x, int n) {
        if(n == 1)
            return x;

        //If power is 0
        if(n == 0)
            return 1;
        
        //If power is negative.
        if(n < 0)
            return 1/(x*myPow(x, abs(n)-1));

        //Divide and conquer to avoid TLE: x*x, n/2
        int res = 0;
       if(n%2 == 0)  
       {
          return myPow( x*x, n/2) ; //NOTE : here don't do res = myPow(x,n/2),return res*res, because square-rooting truncates result,causing test-cases to fail.
           
       }
        else return x*myPow(x, n-1);
    }
};
