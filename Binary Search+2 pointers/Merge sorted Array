/* Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.

Note:

The number of elements initialized in nums1 and nums2 are m and n respectively.
You may assume that nums1 has enough space (size that is greater or equal to m + n) to hold additional elements from nums2.
Example:

Input:
nums1 = [1,2,3,0,0,0], m = 3
nums2 = [2,5,6],       n = 3

Output: [1,2,2,3,5,6] */

//Space complexity and TC = O(n)
class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) 
    {
        //int x = nums1.size();
        vector<int> arr;
        int i = 0,j=0;
        while(i<n && j<m)
        {
            if(nums2[i]<nums1[j])
            {
                arr.push_back(nums2[i]);
                i++;
            }
            else
            {
                arr.push_back(nums1[j]);
                j++;
            }
        }
        while(i<n)
        {
            arr.push_back(nums2[i]);i++;
        }
        while(j<m)
        {
            arr.push_back(nums1[j]);j++;
        }
        //cout<<"[";
        for(int i=0;i<arr.size();i++)
        {
            nums1[i] = arr[i];
        }
        //cout<<"]";
    }
};
