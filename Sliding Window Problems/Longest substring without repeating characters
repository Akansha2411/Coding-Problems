/*Given a string str, find the length of the longest substring without repeating characters.

For “ABDEFGABEF”, the longest substring are “BDEFGA” and “DEFGAB”, with length 6.
For “BBBB” the longest substring is “B”, with length 1.
For “GEEKSFORGEEKS”, there are two longest substrings shown in the below diagrams, with length 7 */

// C++ program to find and print longest 
// substring without repeating characters. 
#include <bits/stdc++.h> 

using namespace std; 

// Function to find and print longest 
// substring without repeating characters. 
string findLongestSubstring(string str) 
{ 
	int i; 
	int n = str.length(); 

	// starting point of current substring. 
	int st = 0; 

	// length of current substring. 
	int currlen; 

	// maximum length substring without repeating 
	// characters. 
	int maxlen = 0; 

	// starting index of maximum length substring. 
	int start; 

	// Hash Map to store last occurrence of each 
	// already visited character. 
	unordered_map<char, int> pos; 

	// Last occurrence of first character is index 0; 
	pos[str[0]] = 0; 

	for (i = 1; i < n; i++) { 

		// If this character is not present in hash, 
		// then this is first occurrence of this 
		// character, store this in hash. 
		if (pos.find(str[i]) == pos.end()) 
			pos[str[i]] = i; 

		else { 
			// If this character is present in hash then 
			// this character has previous occurrence, 
			// check if that occurrence is before or after 
			// starting point of current substring. 
			if (pos[str[i]] >= st) { 

				// find length of current substring and 
				// update maxlen and start accordingly. 
				currlen = i - st; 
				if (maxlen < currlen) { 
					maxlen = currlen; 
					start = st; 
				} 

				// Next substring will start after the last 
				// occurrence of current character to avoid 
				// its repetition. 
				st = pos[str[i]] + 1; 
			} 

			// Update last occurrence of 
			// current character. 
			pos[str[i]] = i; 
		} 
	} 

	// Compare length of last substring with maxlen and 
	// update maxlen and start accordingly. 
	if (maxlen < i - st) { 
		maxlen = i - st; 
		start = st; 
	} 

	// The required longest substring without 
	// repeating characters is from str[start] 
	// to str[start+maxlen-1]. 
	return str.substr(start, maxlen); 
} 

// Driver function 
int main() 
{ 
	string str = "GEEKSFORGEEKS"; 
	cout << findLongestSubstring(str); 
	return 0; 
} 
 /* for finding the length, the code is as follows:
 
 // C++ program to find the length of the longest substring 
// without repeating characters 
#include <bits/stdc++.h> 
using namespace std; 
#define NO_OF_CHARS 256 

int longestUniqueSubsttr(string str) 
{ 
	int n = str.size(); 
	int cur_len = 1; // length of current substring 
	int max_len = 1; // result 
	int prev_index; // previous index 
	
	int* visited = new int[sizeof(int) * NO_OF_CHARS]; 

	/* Initialize the visited array as -1, -1 is used to 
	indicate that character has not been visited yet. */
	for (int i = 0; i < NO_OF_CHARS; i++) 
		visited[i] = -1; 

	/* Mark first character as visited by storing the index 
	of first character in visited array. */
	visited[str[0]] = 0; 

	/* Start from the second character. First character is 
	already processed (cur_len and max_len are initialized 
	as 1, and visited[str[0]] is set */
	for (int i = 1; i < n; i++) { 
		prev_index = visited[str[i]]; 

		/* If the currentt character is not present in the 
		already processed substring or it is not part of 
		the current NRCS, then do cur_len++ */
		if (prev_index == -1 || i - cur_len > prev_index) 
			cur_len++; 

		/* If the current character is present in currently 
		considered NRCS, then update NRCS to start from 
		the next character of the previous instance. */
		else { 
			/* Also, when we are changing the NRCS, we 
			should also check whether length of the 
			previous NRCS was greater than max_len or 
			not.*/
			if (cur_len > max_len) 
				max_len = cur_len; 

			cur_len = i - prev_index; 
		} 

		// update the index of current character 
		visited[str[i]] = i; 
	} 

	// Compare the length of last NRCS with max_len and 
	// update max_len if needed 
	if (cur_len > max_len) 
		max_len = cur_len; 

	free(visited); // free memory allocated for visited 
	return max_len; 
} 


// Driver code 
int main() 
{ 
	string str = "ABDEFGABEF"; 
	
	cout << "The input string is " << str << endl; 
	
	int len = longestUniqueSubsttr(str); 
	
	cout << "The length of the longest non-repeating "
			"character substring is "
		<< len; 
	return 0; 
} 

*/


