/* Given an array nums of n integers where n > 1,  return an array output such that output[i] is equal to the product of all the elements of nums except nums[i].

Example:

Input:  [1,2,3,4]
Output: [24,12,8,6]
Constraint: It's guaranteed that the product of the elements of any prefix or suffix of the array (including the whole array) fits in a 32 bit integer.*/
//The above solution has space complexity O(n)

class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) 
    {
	    int n=nums.size();
        vector<int> v;
        int left[n],right[n];
        left[0] = 1;right[n-1] = 1;
        for(int i=1;i<n;i++)left[i] = nums[i-1]*left[i-1];//prduct of elements on left side of i
        for(int i=n-2;i>=0;i--)right[i]=nums[i+1]*right[i+1];////pdt of elnts on right side of i
        for(int i=0;i<n;i++)
        {
            int x = (right[i]*left[i]);
            v.push_back(x);
        }
        return v;
        
        
    }
};

//Another approach : 
/* // C++ program for product array puzzle 
// with O(n) time and O(1) space. 
#include <bits/stdc++.h> 
using namespace std; 

// epsilon value to maintain precision 
#define EPS 1e-9 

void productPuzzle(int a[], int n) 
{ 
	// to hold sum of all values 
	long double sum = 0; 
	for (int i = 0; i < n; i++) 
		sum += (long double)log10(a[i]); 

	// output product for each index 
	// antilog to find original product value 
	for (int i = 0; i < n; i++) 
		cout << (int)(EPS + pow((long double)10.00, 
						sum - log10(a[i]))) << " "; 
} 

// Driver code 
int main() 
{ 
	int a[] = { 10, 3, 5, 6, 2 }; 
	int n = sizeof(a)/sizeof(a[0]); 
	cout << "The product array is: \n"; 
	productPuzzle(a, n); 
	return 0; 
} 
*/


