/* Given an array, rotate the array to the right by k steps, where k is non-negative.

Example 1:

Input: [1,2,3,4,5,6,7] and k = 3
Output: [5,6,7,1,2,3,4]
Explanation:
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]
Example 2:

Input: [-1,-100,3,99] and k = 2
Output: [3,99,-1,-100]
Explanation: 
rotate 1 steps to the right: [99,-1,-100,3]
rotate 2 steps to the right: [3,99,-1,-100]  */
//O(n) space complexity.

class Solution {
public:
    void rotate(vector<int>& nums, int k)
    {
        int n = nums.size();
        int arr[n];
            for(int i=0;i<n;i++)
            {
                arr[(i+k)%n] = nums[i]; //right shifted array arr.
            }
            for(int i=0;i<n;i++)nums[i]=arr[i];
        
        
        //cout<<"[";
        //for(int i=0;i<n;i++)cout<<arr[i]<<",";
        //cout<<"]";
    }
};

//Other solution : 
/*Algorithm

This approach is based on the fact that when we rotate the array k times, k%nk elements from the back end of the array come to the front and the rest of the elements from the front shift backwards.

In this approach, we firstly reverse all the elements of the array. Then, reversing the first k elements followed by reversing the rest n-knâˆ’k elements gives us the required result.

Let n=7n=7 and k=3k=3.

Original List                   : 1 2 3 4 5 6 7
After reversing all numbers     : 7 6 5 4 3 2 1
After reversing first k numbers : 5 6 7 4 3 2 1
After revering last n-k numbers : 5 6 7 1 2 3 4 --> Result */

/*Instead of right shift,if we have to do left shift by k bits, the steps will be :
1)reverse entire array.
2)revers first n-k bits
3)reverse last k bits */
