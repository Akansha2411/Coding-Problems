/* https://leetcode.com/problems/merge-intervals/
Given a collection of intervals, merge all overlapping intervals. //Try a dry run to understand the code.

Example 1:

Input: [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].
Example 2:

Input: [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping. */

class Solution  
{
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) 
    {
        vector<vector<int>> ans;
    if(intervals.size()==0) return ans;
    sort(intervals.begin(),intervals.end()); //sorting according to starting times.
    int len=intervals.size(),a=-1,b=-1;
    for(int i=0;i<len;i++)
    {
        if(a==-1 and b==-1) //initialization for each value of i
        {
            a=intervals[i][0]; //start time
            b=intervals[i][1]; //end time
            
        }
        else
        {
            if(b>=intervals[i][0]) b=max(b,intervals[i][1]); //comparison in the next run with the previous run vaue of start time.
            else
            {
                ans.insert(ans.end(),{a,b}); //syntax is vector_name.insert (position, val)
                a=-1,b=-1;
                i--; 
            }
        }
    }
    ans.insert(ans.end(),{a,b});
    return ans;
  }
        
};

