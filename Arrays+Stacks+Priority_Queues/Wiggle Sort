/* Arrange array in a zig-zag fashion.
Given an unsorted array nums, reorder it in-place such that nums[0] <= nums[1] >= nums[2] <= nums[3]....

For example, given nums = [3, 5, 2, 1, 6, 4], one possible answer is `[1, 6, 2, 5, 3, 4].*/
//O(nlogn) soution
class Solution {
public:
    void wiggleSort(vector<int> &nums) {
        sort(nums.begin(), nums.end());           // 1,2,3,4,5,6 : 1,3,2,5,4,6 

        for (int i = 2; i < nums.size(); i+=2) {
            int tmp = nums[i - 1];
            nums[i - 1] = nums[i];
            nums[i] = tmp;
        }
    }
};

//Next possible solution is :

// C++ program to sort an array in Zig-Zag form 
#include <iostream> 
using namespace std; 

// Program for zig-zag conversion of array 
void zigZag(int arr[], int n) 
{ 
	// Flag true indicates relation "<" is expected, 
	// else ">" is expected. The first expected relation 
	// is "<" 
	bool flag = true; 

	for (int i=0; i<=n-2; i++) 
	{ 
		if (flag) /* "<" relation expected */
		{ 
			/* If we have a situation like A > B > C, 
			we get A > B < C by swapping B and C */
			if (arr[i] > arr[i+1]) 
				swap(arr[i], arr[i+1]); 
		} 
		else /* ">" relation expected */
		{ 
			/* If we have a situation like A < B < C, 
			we get A < C > B by swapping B and C */
			if (arr[i] < arr[i+1]) 
				swap(arr[i], arr[i+1]); 
		} 
		flag = !flag; /* flip flag */
	} 
} 

// Driver program 
int main() 
{ 
	int arr[] = {4, 3, 7, 8, 6, 2, 1}; 
	int n = sizeof(arr)/sizeof(arr[0]); 
	zigZag(arr, n); 
	for (int i=0; i<n; i++) 
		cout << arr[i] << " "; 
	return 0; 
} 
